using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using UIControls;
using Utils;
using GenericObjects;
using System.Globalization;
using System.Threading;

namespace UIControls
{
    public partial class IdentityControl : UserControl
    {
        #region private members

        EventHandler _onIdentityUpdated;
        EventHandler _onLanguageChanged;
        bool _textChanged;

        #endregion

        #region c-tor

        public IdentityControl()
        {
            InitializeComponent();
        }

        public IdentityControl(EventHandler onIdentityUpdated, EventHandler onlanguageChanged)
        {
            try
            {
                InitializeComponent();
                _onIdentityUpdated = onIdentityUpdated;
                _onLanguageChanged = onlanguageChanged;
            }
            catch (Exception ex)
            {
                Tools.Instance.Logger.LogError(ex.ToString());
            }
        }

        #endregion

        #region event callbacks

        private void txtMyID_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                int lengthBeforeUpdate = txtMyID.Text.Length;
                string stringBefore = txtMyID.Text;
                MessageBox.Show("Autogenerated property!", "Permission denied", MessageBoxButtons.OK, MessageBoxIcon.Information);
                int lengthAfterUpdate = txtMyID.Text.Length;
                if (lengthAfterUpdate > lengthBeforeUpdate)
                {
                    txtMyID.Text = stringBefore;
                }
                _textChanged = false;
            }
            catch (Exception ex)
            {
                Tools.Instance.Logger.LogError(ex.ToString());
            }
        }

        private void txtFriendlyName_Leave(object sender, EventArgs e)
        {
            try
            {
                if (_textChanged)
                {
                    // update the friendly name
                    string newFriendlyName = txtFriendlyName.Text;
                    _onIdentityUpdated.Invoke(this, new IdentityEventArgs()
                    {
                        FriendlyName = newFriendlyName
                    });
                }
                _textChanged = false;
            }
            catch (Exception ex)
            {
                Tools.Instance.Logger.LogError(ex.ToString());
            }
        }

        private void txtFriendlyName_TextChanged(object sender, EventArgs e)
        {
            _textChanged = true;
        }

        #endregion

        #region public methods

        public void UpdateFriendlyName(string newFriendlyName)
        {
            try
            {
                Tools.Instance.CrossThreadingControl.SetValue(txtFriendlyName, newFriendlyName, "Text");
                _textChanged = false;
            }
            catch (Exception ex)
            {
                Tools.Instance.Logger.LogError(ex.ToString());
            }
        }

        public void UpdateMyID(string newID)
        {
            try
            {
                Tools.Instance.CrossThreadingControl.SetValue(txtMyID, newID, "Text");
            }
            catch (Exception ex)
            {
                Tools.Instance.Logger.LogError(ex.ToString());
            }
        }

        #endregion

        private void lblLanguage_MouseClick(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.Button == System.Windows.Forms.MouseButtons.Left)
                {
                    string language = string.Empty;
                    if (lblLanguage.Text.ToLower().Equals("RO".ToLower()))
                    {
                        language = "ro-RO";
                    }
                    else
                    {
                        language = "en-US";
                    }
                    Tools.Instance.GenericMethods.ChangeLanguage(language, this.Controls, typeof(IdentityControl));
                    _onLanguageChanged.Invoke(this, new LanguageEventArgs()
                    {
                        Language = language
                    });
                }
            }
            catch (Exception ex)
            {
                Tools.Instance.Logger.LogError(ex.ToString());
            }
        }
    }
}
